var maVariable = 23; // camelcase 
var trois_fois_9 = 27; // pas commencer avec un chiffre
var troisFois9 = 27; //camalcase
var leTotal = 100; //pas d'espace
var email= "jean.dupon@gmail.com"; //pas commencer avec @
var variable = (30+20+10); //???
var phrase ="Bonjour tout le monde !"; //les "" 
var age = 26; //""
var resultat = 3 + 3 + 3; // pas de "" autour du 3 

var entier = parseInt("15");  //parse(val,base)


typeof "John" //string
typeof 3.14 //number
typeof NaN //number 
typeof false //boolean
typeof [1,2,3,4] //object
typeof {name:'John', age:34} //object
typeof new Date() //object
typeof function () {} //function
typeof null //object

//array

valueOf() //valeur primitive?
toString() // afficher element du tableau
join(*) //same as toString en spécifiant le séparateur
pop() //retire le dernier
push() //ajoute un valeur 
shift() //retire le première element du tableau
unshift() //ajouter un element au debut du tableau

sort() //trie alphabétique
//splice(a,b,el1,el1) //ajoute el1 et e2 à partir de a (sdemete b)

reverse() //ok
sort((a,b)=>a-b) //(b-a)
concat(tab)
slice(a,b) //découpe entre l'element a et b

/////////


var tab = new Array();
tab.push(1)
tab.push(2)
tab.push(3)
tab.push(6)
console.log(tab.toString());
console.log(tab.join(";"));
console.log(tab.pop());
tab.unshift(5);
console.log(tab.shift())

tab.sort((a,b)=>b-a)
console.log(tab.toString()) 

var tab2 = [11,56,145];
tab = tab.reverse().concat(tab2)
console.log(tab.toString())


console.log(tab.slice(1,11))


/*
*
*1
*
*/


var tab = ["a","b","c","d"]
var tab = new Array()
tab.push("a");
tab.push("b");
tab.push("c");
tab.push("d");

/**
*2
*/

var resultats = {
	pierre:10,paul:6, jacques : 3, alain : 8}
var somme = 0;


somme += resultats.pierre + resultats.paul+resultats.jacques +resultats.alain;


console.log("somme : "+somme);
console.log("moyenne : "+somme/4);

/**
*  3
*/

var inverse = tab.push("e")
inverse = tab.inverse()

/**
4
*/
tab.push("e");
/**
*5
*/
var resultats = {
pierre:10,paul:6, jacques : 3, alain : 8}
var tmp = Object.entries(resultats).sort((a,b)=>a[1]-b[1]);
var median = tmp.indexOf(tmp.find((a)=>a[1]>=5))
var echec = tmp.slice(median)

/*
charAt() //index
charCodeAt()
concat()
fromCharCode() //unicode
indexOf() // recherche 1er occurence
lastIndexOf() //dernière occurence
match("regex")
replace
serach
splice
split
substr
substring
toStringtoUpperCase
valueOf
*/

var chaine = "ma formation javascript" ;

//ma
chaine.indexOf("ma")

//p 
chaine.indexOf("p")

//lettre situé a 21
chaine.charAt(21)

chaine.replace("javascript","java")

chaine.replace(/ /g,",")

chaine.split('').reverse()


##

javascript:void(0) ne fait rien 


## Dates 

var today = new Date(); //today
alert(today);


var d1= new Date(timestamp);

var d3 = new Date(year,month-1,day, hour,minit,second, millisecond)

getFullYear()
getMonth()
getDate()
getDay()
getHours()
...
getTime()


### Loops

do{
	
}while

for(var in str)
{
	
}
for(var of var)
{
	
}
while()
{
	
}

##functions 

var createPet = function(txt)
{
 var attr;
 return{ setName:function(newName){name = newName}},
 getName:function(){return name;}
	
}

var pet = createPet("name");

//Arguments  (daaaamn)

function f(separator)
{
	var results = '';
	for(var i=1;i <arguments.length;i++)
		results += `${arguments[i]}${separator}`
	
	return results;
}

f(',','hihi','hoho')

//default values f(a, b='i')

// rest parameters vs arguments

//->restArgs are array 
//->arguments = all args // + callee
//-> rest : only those passed to the function 


//Destructuring 

function(...[a,b,c])
{
return a + b + c;	
}



/***
**
* Promises
*/
pending : initial state, not fulfilled or rejected
fulfilled : successful operation (fulfill)
rejected : failed operation (reject) 
settled : the Promise is ether fulfilled or rejected, but not pending


Promise : fulfill - reject : then(onFullFIllment) / then(onRejection)|catch(onRejection)
:return  Promise : then() - catch():


const myPromise = new Promise((resolve,reject)=>
{
	resolve(value)
	reject("reason")
})
//DOM

document.createElement(nodeName)
document.body.appendNode(document.createElement(nodeName))


attributes
childNodes
firstChild

//timer

a = setTimeout(f,delai)
clearTimeout(a)

i = setInterval(d, compte a rebours)
clearInterval(i)

//Arrays
forEach
//map : returns a enw array of  the return value

//filter 

//some : true if one of them is true

//every if all are true

//reduce : to a single item

//reduceRight(f, initialValue))


//Array.prototype.forEach.call(array, applyThis)

//typedArrays

(U)int8Array  Int16Array int32Array Float32Array


//MAP
m = new Map();
m.set('clé','value');
m.size;
m.delete('clé')
M.clear()

//WeakMap same as Map but not numerable

//Sets 
var s = new Set();
s.add("")
s.delete(val)	
s.size
for(let i of s) 
	
car ws = new WeakSet

/***
*
*
* Object
*/

var o = new Object()
o.attr=value
o["attr"]=value 




//CSS
getComputedStyle(elt);
document.querySelector(".example")

//EVENTS

changes
click
dbclick
error
focus
blur
keydown
keyoup
keypress
load
mousedown
mouseup
mousemove
mouseover
resize
select


//Nodes

document.body.appendChild(document.createElemnt("li"))

childNodes
firstChild
attributes
lastChild
parentChild
parentNode
nodeName

previousSibling : noeud précedent au meme niveau
nextSibling : prochain
textContent : le texte

nodeType = 1 noeud element 2 attibuts 3 text


nodeValue retourne la valeur du noeud


/***
* Object
*/

function Car(make,model)
{
	 this.make = make;
	 this.model = model;
	 
}

var v = new Car('haha','hehe')


var Animal = {type:'yo', name : '',getType:function(){return this.type}}

var fish = Object.create(Animal)
fish.type = "heheh";
fish.getType()

/***
* prototype
*/

Car.prototype.color = null;
v.color = "red";

//methods

var obj = {
	method(param){
		
	}
}

//getter and setters

var o = {
	a: 7,
	get b()
	{
		return this.age;
	},
	set c(x)
	{
		this.a = x;
	}
	
}

o.b 
o.c(val)

//
var d =Date.prototype;
Object.defineProperty(d,'year',
{
	get:function(){ return this.getFullYear();},
	set: function(y) {this.setFullYear(y);}
});


var now = new Date();
console.log(now.year); // 2000
now.year = 2001; // 987617605170
console.log(now);
// Wed Apr 18 11:13:25 GMT-0700 (Pacific Daylight Time) 2001


var o = { a: 0}

Object.defineProperty(o,{
    'b': { get: function() { return this.a + 1; } },
    'c': { set: function(x) { this.a = x / 2; } }
});

o.c = 10; // Runs the setter, which assigns 10 / 2 (5) to the 'a' property



//Deleting properties 
delete obj.attr;
delete g; //globale value
